<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RL on Golden Hat</title><link>https://frankccccc.github.io/blog/categories/rl/</link><description>Recent content in RL on Golden Hat</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Mar 2021 17:02:31 +0800</lastBuildDate><atom:link href="https://frankccccc.github.io/blog/categories/rl/index.xml" rel="self" type="application/rss+xml"/><item><title>Part III - From AlphaGo to MuZero</title><link>https://frankccccc.github.io/blog/posts/part_iii-from_alphago_to_muzero/</link><pubDate>Thu, 04 Mar 2021 17:02:31 +0800</pubDate><guid>https://frankccccc.github.io/blog/posts/part_iii-from_alphago_to_muzero/</guid><description>Mastering Atari, Go, Chess and Shogi by Planning with a Learned Model It is just the paper proposing MuZero. MuZero is quite famous when I write this note(Jan 2021). Lots of people tried to reproduce the incredible performance of the paper. Some of well-known implementations like muzero-general give a clear and modular implementation of MuZero. If you are interested in MuZero, you can play with it. Well, let&amp;rsquo;s diving into the paper.</description></item><item><title>Part II - From AlphaGo to MuZero</title><link>https://frankccccc.github.io/blog/posts/part_ii-from_alphago_to_muzero/</link><pubDate>Thu, 04 Mar 2021 16:54:39 +0800</pubDate><guid>https://frankccccc.github.io/blog/posts/part_ii-from_alphago_to_muzero/</guid><description>Mastering the game of Go without human knowledge The paper propose AlphaGo Zero which is known as self-playing without human knowledge.
Reinforcement learning in AlphaGo Zero $$ (p, v) = f_{\theta} $$
$$ l = (z - v)^2 - \pi^T log(p) + c||\theta||^2 $$
Mastering Chess and Shogi by Self-Play with a General Reinforcement Learning Algorithm The paper propose AlphaZero which is known as self-playing to compete any kinds of board game.</description></item><item><title>Simple Guide Of VDN And QMIX</title><link>https://frankccccc.github.io/blog/posts/simple_guide_of_vdn_and_qmix/</link><pubDate>Fri, 26 Feb 2021 01:13:41 +0800</pubDate><guid>https://frankccccc.github.io/blog/posts/simple_guide_of_vdn_and_qmix/</guid><description>Value-Decomposition Network(VDN) QMIX Problem Setup And Assumption Constraint The QMIX imporve the VDN algorithm via give a more general form of the contraint. It defines the contraint like
$$\frac{\partial Q_{tot}}{\partial Q_{a}} \geq 0, \forall a$$
where $Q_{tot}$ is the joint value function and $Q_{a}$ is the value function for each agent.
An intuitive eplaination is that we want the weights of any individual value function $Q_{a}$ are positive. If the weights of individual value function $Q_{a}$ are negative, it will discourage the agent to cooperate, since the higher $Q_{a}$, the lower joint value $Q_{tot}$.</description></item><item><title>Part I - From AlphaGo to MuZero</title><link>https://frankccccc.github.io/blog/posts/part_i-from_alphago_to_muzero/</link><pubDate>Fri, 19 Feb 2021 01:14:40 +0800</pubDate><guid>https://frankccccc.github.io/blog/posts/part_i-from_alphago_to_muzero/</guid><description>AlphaGo is quite famous when I was a freshman of college. It somehow is the reason that I was addicted to Reinforcement Learning. Thus Our journey of model-based RL will start here. Although it is not the first one that propose model-based RL, I still believe it will give a big picture of model-based RL.
Mastering the game of Go with deep neural networks and tree search Introduction AlphaGo combines 2 kinds of model, including policy network and value network.</description></item></channel></rss>