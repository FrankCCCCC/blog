<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>deep learning on Golden Hat</title><link>https://frankccccc.github.io/blog/tags/deep-learning/</link><description>Recent content in deep learning on Golden Hat</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 04 Mar 2021 17:02:31 +0800</lastBuildDate><atom:link href="https://frankccccc.github.io/blog/tags/deep-learning/index.xml" rel="self" type="application/rss+xml"/><item><title>Part III - From AlphaGo to MuZero</title><link>https://frankccccc.github.io/blog/posts/part_iii-from_alphago_to_muzero/</link><pubDate>Thu, 04 Mar 2021 17:02:31 +0800</pubDate><guid>https://frankccccc.github.io/blog/posts/part_iii-from_alphago_to_muzero/</guid><description>Mastering Atari, Go, Chess and Shogi by Planning with a Learned Model That is just the paper proposing MuZero. It is quite famous when I write this note(Jan 2021). Lots of people tried to reproduce the incredible performance of this paper. Some of well-known implementations like muzero-general give a clear code and modular structure of MuZero.
Introdution The main idea is to predict the future that are directly relevant for planning.</description></item><item><title>Part II - From AlphaGo to MuZero</title><link>https://frankccccc.github.io/blog/posts/part_ii-from_alphago_to_muzero/</link><pubDate>Thu, 04 Mar 2021 16:54:39 +0800</pubDate><guid>https://frankccccc.github.io/blog/posts/part_ii-from_alphago_to_muzero/</guid><description/></item><item><title>Toward NNGP and NTK</title><link>https://frankccccc.github.io/blog/posts/toward_nngp_and_ntk/</link><pubDate>Fri, 19 Feb 2021 20:46:29 +0800</pubDate><guid>https://frankccccc.github.io/blog/posts/toward_nngp_and_ntk/</guid><description>Neural Network Gaussian Process(NNGP) Model the neural network as GP, aka neural network Gaussian Process(NNGP). Intuitively, the kernel of NNGP compute the distance between the output vectors of 2 input data points.
We define the following functions as neural networks with fully-conntected layers:
$$z_{i}^{1}(x) = b_i^{1} + \sum_{j=1}^{N_1} \ W_{ij}^{1}x_j^1(x), \ \ x_{j}^{1}(x) = \phi(b_i^{0} + \sum_{k=1}^{d_{in}} \ W_{ik}^{0}x_k(x))$$
where $b_i^{1}$ is the $i$th-bias of the second layer(the same as first hidden layer), $W_{ij}^{1}$ is the $i$th-weights of the first layer(the same as input layer) , function $\phi$ is the activation function, and $x$ is the input data of the neural network.</description></item><item><title>Part I - From AlphaGo to MuZero</title><link>https://frankccccc.github.io/blog/posts/part_i-from_alphago_to_muzero/</link><pubDate>Fri, 19 Feb 2021 01:14:40 +0800</pubDate><guid>https://frankccccc.github.io/blog/posts/part_i-from_alphago_to_muzero/</guid><description>AlphaGo is quite famous when I was a freshman of college. It somehow is the reason that I was addicted to Reinforcement Learning. Thus Our journey of model-based RL will start here. Although it is not the first one that propose model-based RL, I still believe it will give a big picture of model-based RL.
Mastering the game of Go with deep neural networks and tree search Introduction AlphaGo combines 2 kinds of model, including policy network and value network.</description></item></channel></rss>