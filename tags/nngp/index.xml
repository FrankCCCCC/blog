<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NNGP on Golden Hat</title><link>https://frankccccc.github.io/blog/tags/nngp/</link><description>Recent content in NNGP on Golden Hat</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 15 Mar 2021 23:34:57 +0800</lastBuildDate><atom:link href="https://frankccccc.github.io/blog/tags/nngp/index.xml" rel="self" type="application/rss+xml"/><item><title>Part II - Toward NNGP and NTK</title><link>https://frankccccc.github.io/blog/posts/toward_nngp_and_ntk/</link><pubDate>Fri, 19 Feb 2021 20:46:29 +0800</pubDate><guid>https://frankccccc.github.io/blog/posts/toward_nngp_and_ntk/</guid><description>Neural Tangent Kernel(NTK)
&amp;ldquo;In short, NTK represent the changes of the weights before and after the gradient descent update&amp;rdquo; Let&amp;rsquo;s start the journey of revealing the black-box neural networks.
Setup a Neural Network First of all, we need to define a simple neural network with 2 hidden layers
$$ y(x, w)$$
where $y$ is the neural network with weights $w \in \mathbb{R}^m$ and, ${ x, \bar{y} }_N$ is the dataset which is a set of the input data and the output data with $N$ data points.</description></item><item><title>Part I - Toward NNGP and NTK</title><link>https://frankccccc.github.io/blog/posts/part_i_toward_nngp_and_ntk/</link><pubDate>Mon, 15 Mar 2021 23:34:57 +0800</pubDate><guid>https://frankccccc.github.io/blog/posts/part_i_toward_nngp_and_ntk/</guid><description>Neural Network Gaussian Process(NNGP) Model the neural network as GP, aka neural network Gaussian Process(NNGP). Intuitively, the kernel of NNGP compute the distance between the output vectors of 2 input data points.
We define the following functions as neural networks with fully-conntected layers:
$$z_{i}^{1}(x) = b_i^{1} + \sum_{j=1}^{N_1} \ W_{ij}^{1}x_j^1(x), \ \ x_{j}^{1}(x) = \phi(b_i^{0} + \sum_{k=1}^{d_{in}} \ W_{ik}^{0}x_k(x))$$
where $b_i^{1}$ is the $i$th-bias of the second layer(the same as first hidden layer), $W_{ij}^{1}$ is the $i$th-weights of the first layer(the same as input layer) , function $\phi$ is the activation function, and $x$ is the input data of the neural network.</description></item></channel></rss>